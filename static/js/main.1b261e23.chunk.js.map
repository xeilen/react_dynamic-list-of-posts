{"version":3,"sources":["api/api.js","api/posts.js","components/Loader/Loader.jsx","components/PostsList/PostsList.jsx","api/comments.js","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","api/users.js","components/UserSelect/UserSelect.js","App.jsx","index.js"],"names":["BASE_URL","getPosts","userId","a","fetch","response","ok","Error","status","statusText","json","posts","data","filter","post","getPostDetails","postId","Loader","className","PostsList","selectedUserId","setSelectedPostId","selectedPostId","useState","setPosts","error","setError","isLoading","setLoading","useEffect","postsFromServer","loadPosts","map","key","id","title","type","onClick","defaultProps","getComments","comments","comment","deleteComment","method","NewCommentForm","handleUpdateComments","commentAuthor","setCommentAuthor","email","setEmail","body","setBody","handleChange","e","target","name","value","addComment","event","preventDefault","newComment","headers","JSON","stringify","onSubmit","placeholder","onChange","PostDetails","setPost","setComments","errorMessage","setErrorMessage","isVisibleComments","setVisibleComments","Promise","all","commentsFromServer","postFromServer","fetchPostAndComments","useCallback","updatedComments","handleDeleteComment","length","prevState","getUsers","user","UserSelect","selectedUser","setSelectedUser","users","setUsers","usersFromServer","fetchUsers","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1b261e23.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com';\n","import { BASE_URL } from './api';\n\nexport const getPosts = async(userId) => {\n  const response = await fetch(`${BASE_URL}/posts`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - Posts is ${response.statusText}`);\n  }\n\n  const json = await response.json();\n\n  const posts = json.data;\n\n  if (userId === 'All') {\n    return posts;\n  }\n\n  return posts.filter(post => post.userId === +userId);\n};\n\nexport const getPostDetails = async(postId) => {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - Post is ${response.statusText}`);\n  }\n\n  const json = await response.json();\n\n  return json.data;\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport './PostsList.scss';\nimport PropTypes from 'prop-types';\nimport { getPosts } from '../../api/posts';\nimport { Loader } from '../Loader';\n\nexport const PostsList = (\n  {\n    selectedUserId,\n    setSelectedPostId,\n    selectedPostId,\n  },\n) => {\n  const [posts, setPosts] = useState([]);\n  const [error, setError] = useState('');\n  const [isLoading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const loadPosts = async(userId) => {\n      try {\n        setLoading(true);\n\n        const postsFromServer = await getPosts(userId);\n\n        setLoading(false);\n        setPosts(postsFromServer);\n      } catch (e) {\n        setLoading(false);\n        setError(`${e}`);\n      }\n    };\n\n    loadPosts(selectedUserId);\n  }, [selectedUserId]);\n\n  const choosePost = (postId) => {\n    if (selectedPostId === postId) {\n      setSelectedPostId(null);\n    } else {\n      setSelectedPostId(postId);\n    }\n  };\n\n  if (error) {\n    return (\n      <div className=\"PostsList\">\n        <h3>{error}</h3>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      {isLoading\n        ? <Loader />\n        : (\n          <ul className=\"PostsList__list\">\n            {posts.map(post => (\n              <li key={post.id} className=\"PostsList__item\">\n                <div>\n                  <b>{`[User #${post.userId}]: `}</b>\n                  {post.title}\n                </div>\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => choosePost(post.id)}\n                >\n                  {selectedPostId === post.id ? 'Close' : 'Open'}\n                </button>\n              </li>\n            ))}\n          </ul>\n        )}\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  selectedUserId: PropTypes.string.isRequired,\n  selectedPostId: PropTypes.number,\n  setSelectedPostId: PropTypes.func.isRequired,\n};\n\nPostsList.defaultProps = {\n  selectedPostId: '',\n};\n","import { BASE_URL } from './api';\n\nexport const getComments = async(postId) => {\n  const response = await fetch(`${BASE_URL}/comments`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - Comments is ${response.statusText}`);\n  }\n\n  const json = await response.json();\n\n  const comments = json.data;\n\n  return comments.filter(comment => comment.postId === postId);\n};\n\nexport const deleteComment = id => (\n  fetch(\n    `${BASE_URL}/comments/${id}`,\n    {\n      method: 'DELETE',\n    },\n  ));\n\nexport const postComment = comment => (\n  fetch(\n    `${BASE_URL}/comments`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8',\n      },\n      body: JSON.stringify(comment),\n    },\n  )\n);\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\nimport PropTypes from 'prop-types';\nimport { postComment } from '../../api/comments';\n\nexport const NewCommentForm = ({ postId, handleUpdateComments }) => {\n  const [commentAuthor, setCommentAuthor] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'commentAuthor':\n        setCommentAuthor(value);\n        break;\n      case 'email':\n        setEmail(value);\n        break;\n      case 'body':\n        setBody(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const addComment = async(event) => {\n    event.preventDefault();\n\n    const newComment = {\n      name: commentAuthor,\n      email,\n      body,\n      postId,\n    };\n\n    await postComment(newComment);\n\n    handleUpdateComments();\n\n    setCommentAuthor('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={addComment}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"commentAuthor\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={commentAuthor}\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={handleChange}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  handleUpdateComments: PropTypes.func.isRequired,\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { getPostDetails } from '../../api/posts';\nimport { deleteComment, getComments } from '../../api/comments';\nimport { Loader } from '../Loader';\n\nexport const PostDetails = ({ postId }) => {\n  const [post, setPost] = useState(null);\n  const [comments, setComments] = useState([]);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [isVisibleComments, setVisibleComments] = useState(true);\n  const [isLoading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchPostAndComments = async(id) => {\n      try {\n        setLoading(true);\n        const [commentsFromServer, postFromServer] = await Promise\n          .all([getComments(id), getPostDetails(id)]);\n\n        setLoading(false);\n        setPost(postFromServer);\n        setComments(commentsFromServer);\n      } catch (error) {\n        setLoading(false);\n        setErrorMessage(`${error}`);\n      }\n    };\n\n    fetchPostAndComments(postId);\n  }, [postId]);\n\n  const handleUpdateComments = useCallback(async() => {\n    try {\n      const updatedComments = await getComments(postId);\n\n      setComments(updatedComments);\n    } catch (error) {\n      setErrorMessage(`${error}`);\n    }\n  }, [postId]);\n\n  const handleDeleteComment = async(id) => {\n    await deleteComment(id);\n\n    handleUpdateComments();\n  };\n\n  if (errorMessage) {\n    return (\n      <div className=\"PostDetails\">\n        <h3>{errorMessage}</h3>\n      </div>\n    );\n  }\n\n  if (!post) {\n    return null;\n  }\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      {isLoading\n        ? <Loader />\n        : (\n          <>\n            <section className=\"PostDetails__post\">\n              <p>{post.body}</p>\n            </section>\n            {comments.length\n              ? (\n                <section className=\"PostDetails__comments\">\n                  <button\n                    type=\"button\"\n                    className=\"button\"\n                    onClick={() => setVisibleComments(prevState => !prevState)}\n                  >\n                    {`${isVisibleComments\n                      ? 'Hide'\n                      : 'Show'} ${comments.length} comments`}\n                  </button>\n                  {isVisibleComments && (\n                    <ul className=\"PostDetails__list\">\n                      {comments.map(comment => (\n                        <li\n                          className=\"PostDetails__list-item\"\n                          key={comment.id}\n                        >\n                          <button\n                            type=\"button\"\n                            className=\"PostDetails__remove-button button\"\n                            onClick={() => handleDeleteComment(comment.id)}\n                          >\n                            X\n                          </button>\n                          <p>{comment.body}</p>\n                        </li>\n                      ))}\n                    </ul>\n                  )}\n                </section>\n              ) : ''}\n            <section>\n              <div className=\"PostDetails__form-wrapper\">\n                <NewCommentForm\n                  postId={postId}\n                  handleUpdateComments={handleUpdateComments}\n                />\n              </div>\n            </section>\n          </>\n        )}\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  postId: PropTypes.number.isRequired,\n};\n","import { BASE_URL } from './api';\n\nexport const getUsers = async() => {\n  const response = await fetch(`${BASE_URL}/users`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - Users is ${response.statusText}`);\n  }\n\n  const json = await response.json();\n\n  return json.data.filter(user => user.id <= 10);\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { getUsers } from '../../api/users';\n\nexport const UserSelect = ({ selectedUser, setSelectedUser }) => {\n  const [users, setUsers] = useState([]);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  useEffect(() => {\n    const fetchUsers = async() => {\n      try {\n        const usersFromServer = await getUsers();\n\n        setUsers(usersFromServer);\n      } catch (error) {\n        setErrorMessage(`${error}`);\n      }\n    };\n\n    fetchUsers();\n  }, []);\n\n  if (errorMessage) {\n    return <h2>{errorMessage}</h2>;\n  }\n\n  return (\n    <label>\n      Select a user: &nbsp;\n\n      <select\n        className=\"App__user-selector\"\n        value={selectedUser}\n        onChange={event => setSelectedUser(event.target.value)}\n      >\n        <option value=\"All\">All users</option>\n        {users.map(user => (\n          <option key={user.id} value={user.id}>{user.name}</option>\n        ))}\n      </select>\n    </label>\n  );\n};\n\nUserSelect.propTypes = {\n  selectedUser: PropTypes.string.isRequired,\n  setSelectedUser: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nimport { UserSelect } from './components/UserSelect/UserSelect';\n\nconst App = () => {\n  const [selectedUser, setSelectedUser] = useState('All');\n  const [selectedPostId, setSelectedPostId] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <UserSelect\n          selectedUser={selectedUser}\n          setSelectedUser={setSelectedUser}\n        />\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUserId={selectedUser}\n            selectedPostId={selectedPostId}\n            setSelectedPostId={setSelectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId\n            ? <PostDetails postId={selectedPostId} />\n            : <h3>Select the post</h3>}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}